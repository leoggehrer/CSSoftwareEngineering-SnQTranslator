@{
    @using SnQTranslator.AspMvc.Models.Business.App
    @using SnQTranslator.AspMvc.Modules.Handler
    @using SnQTranslator.AspMvc.Modules.Session
    @using SnQTranslator.AspMvc.Modules.Language
    @using SnQTranslator.AspMvc.Modules.View
    @model IEnumerable<SnQTranslator.AspMvc.Models.Persistence.App.Translation>

    var viewBagWrapper = new ViewBagWrapper(ViewBag);
    var sessionWrapper = new SessionWrapper(Context.Session);

    viewBagWrapper.Translate = Translator.TranslateIt;
    viewBagWrapper.Controller = ViewContext.RouteData.Values["controller"].ToString();
    viewBagWrapper.Action = ViewContext.RouteData.Values["action"].ToString();
    viewBagWrapper.ViewType = Model != null ? Model.GetType() : null;

    var all = string.Empty;
    var page = string.Empty;
    var activeHref = "/Translations/IndexByPage";
    var appItems = ViewData[nameof(AppItem)] as string[];

    ViewData["Title"] = viewBagWrapper.Title;
    <h1>@viewBagWrapper.Title</h1>

    if (sessionWrapper.HasValue(nameof(page)))
    {
        page = sessionWrapper.GetStringValue(nameof(page), all);
    }
}

<h1>Index</h1>

@if (string.IsNullOrEmpty(sessionWrapper.SessionToken) == false)
{
    <div class="d-flex bg-transparent">
        <div class="mr-auto p-sm-2">
            <a asp-action="Create" class="btn btn-outline-secondary">@viewBagWrapper.TranslateFor("Create New")</a>
        </div>
        <div class="p-sm-2">
            <a asp-action="Export" class="btn btn-outline-secondary">@viewBagWrapper.TranslateFor("Export")</a>
        </div>
        <div class="p-sm-2">
            <a asp-action="Import" class="btn btn-outline-primary">@viewBagWrapper.TranslateFor("Import")</a>
        </div>
    </div>
}

@if (string.IsNullOrEmpty(ErrorHandler.LastViewError) == false)
{
    <div class="alert alert-danger" role="alert">
        @ErrorHandler.GetLastViewErrorAndClear()
    </div>
}

@{
    var appName = sessionWrapper.GetStringValue("appname");

    if (appItems.Any(e => e != null && e.Equals(appName)) == false)
    {
        appName = null;
    }
    var selectItems = new SelectList(appItems).ToList();

    selectItems.ForEach(e =>
    {
        if (string.IsNullOrEmpty(e.Text))
        {
            e.Text = "*";
        }
        if (appName != null && e != null && e.Text.Equals(appName))
        {
            e.Selected = true;
        }
    });
    char chrStart = 'A', chrEnd = 'Z';
    <div class="d-flex justify-content-center">
        <div class="p-0" style="margin-right: 10px; min-width: 100px;">
            @Html.DropDownList("AppNames", selectItems, null, new { @class = "form-control", @onchange = "callByAppName(this.value)" })
        </div>
        @for (char chrRun = chrStart; chrRun <= chrEnd; chrRun++)
        {
            var strRun = Char.ToString(chrRun);

            if (chrRun.ToString().Equals(page, StringComparison.CurrentCultureIgnoreCase))
            {
                <div class="p-sm-0"><a class="page-link" style="background-color: lightgray;" href="@($"{activeHref}?page={strRun}")">@strRun</a></div>
            }
            else
            {
                <div class="p-sm-0"><a class="page-link" href="@($"{activeHref}?page={strRun}")">@strRun</a></div>
            }
        }
        @if (string.IsNullOrEmpty(page) || page.Equals(all, StringComparison.CurrentCultureIgnoreCase))
        {
            <div class="p-0" style="margin-left: 10px;"><a class="page-link" style="background-color: lightgray;" href="@($"{activeHref}?page={all}")">All</a></div>
        }
        else
        {
            <div class="p-0" style="margin-left: 10px;"><a class="page-link" href="@($"{activeHref}")">All</a></div>
        }
    </div>
    <p></p>
    @await Html.PartialAsync("_CardList", Model)
}

<script>
    function callByAppName(val) {
        window.location.href = "/Translations/IndexByAppName?appName=" + val;
    }
</script>
