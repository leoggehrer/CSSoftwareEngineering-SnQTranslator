@*@CodeCopy*@
@{
    //@model SnQTranslator.AspMvc.Modules.View.ViewBagWrapper
    //int pageCount = 100;
    //int pageSize = 50;
    //int pageIndex = 0;
    //var viewBagWrapper = Model;


    //int MinItemIndex(int index)
    //{
    //    return Math.Min((index * pageSize) + 1, pageCount);
    //}
    //int MaxItemIndex(int index)
    //{
    //    return Math.Min(((index + 1) * pageSize), pageCount);
    //}

    //string prvCss = pageIndex == 0 ? "previous disabled" : "previous";
    //string nxtCss = (pageIndex + 1) * pageSize >= pageCount ? "next disabled" : "next";

    //<div class="row" style="margin-left: 10px; margin-right: 10px;">
    //    <nav>
    //        <div class="pagination dropdown pull-left" style="min-width: 175px;" data-toggle="tooltip" title="@viewBagWrapper.Translate("PageIndex")">
    //            <button class="btn btn-default dropdown-toggle" type="button" name="pageIndex" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
    //                @($"{MinItemIndex(pageIndex)}..{MaxItemIndex(pageIndex)} / {pageCount}")
    //                <span class="caret"></span>
    //            </button>
    //            <ul class="dropdown-menu">
    //                @for (int index = 0; index <= Model.MaxPageIndex; index++)
    //                {
    //                    string action = Url.Action(pageIndexAction, Model.CurrentController, Model.CreateIndexParameters(index));

    //                    if (index == pageIndex)
    //                    {
    //                        <li class="active"><a href="@action">@($"{MinItemIndex(index)}..{MaxItemIndex(index)}")</a></li>
    //                    }
    //                    else
    //                    {
    //                        <li><a href="@action">@($"{MinItemIndex(index)}..{MaxItemIndex(index)}")</a></li>
    //                    }
    //                }
    //            </ul>
    //        </div>

    //        <ul class="pagination pull-left">
    //            <li class="@prvCss">
    //                @if (pageIndex > 0)
    //                {
    //                    <a href="@Url.Action(pageIndexAction, Model.CurrentController, Model.CreatePrvParameters())" aria-label="Previous">
    //                        <span aria-hidden="true">&laquo;</span>
    //                    </a>
    //                }
    //                else
    //                {
    //                    <span aria-hidden="true">&laquo;</span>
    //                }
    //            </li>
    //            @{
    //                int deltaPage = 10;
    //                int pageLowerIdx = 0;
    //                int pageUpperIdx = deltaPage;
    //                int pageLowerRange = (pageLowerIdx * pageSize);

    //                while (pageLowerRange <= pageCount)
    //                {
    //                    if (pageIndex >= pageLowerIdx && pageIndex < pageUpperIdx)
    //                    {
    //                        int startIdx = pageLowerIdx;

    //                        while (startIdx > 0 && startIdx + deltaPage - 1 > Model.MaxPageIndex)
    //                        {
    //                            startIdx--;
    //                        }
    //                        for (int idx = startIdx; idx < pageUpperIdx && (idx * pageSize) < pageCount; idx++)
    //                        {
    //                            string text = $"{MinItemIndex(idx)}..{MaxItemIndex(idx)}";
    //                            string action = Url.Action(pageIndexAction, Model.CurrentController, Model.CreateIndexParameters(idx));

    //                            if (idx == pageIndex)
    //                            {
    //                                <li class="active"><a data-toggle="tooltip" title="@text" href="@action">@(idx + 1)</a></li>
    //                            }
    //                            else
    //                            {
    //                                <li><a data-toggle="tooltip" title="@text" href="@action">@(idx + 1)</a></li>
    //                            }
    //                        }
    //                    }
    //                    pageLowerIdx = pageUpperIdx;
    //                    pageUpperIdx = pageUpperIdx + deltaPage;
    //                    pageLowerRange = (pageLowerIdx * pageSize);
    //                }
    //            }
    //            <li class="@nxtCss">
    //                @if ((pageIndex + 1) * pageSize < pageCount)
    //                {
    //                    <a href="@Url.Action(pageIndexAction, Model.CurrentController, Model.CreateNxtParameters())" aria-label="Next">
    //                        <span aria-hidden="true">&raquo;</span>
    //                    </a>
    //                }
    //                else
    //                {
    //                    <span aria-hidden="true">&raquo;</span>
    //                }
    //            </li>
    //        </ul>

    //        <div class="pagination dropdown pull-right" style="margin-left: 20px;" data-toggle="tooltip" title="@translate(" PageSize")">
    //            <button class="btn btn-default dropdown-toggle" type="button" name="pageSize" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
    //                @pageSize
    //                <span class="caret"></span>
    //            </button>
    //            <ul class="dropdown-menu">
    //                @foreach (int size in viewDataWrapper.PageSizes)
    //                {
    //                    string action = Url.Action(pageSizeAction, Model.CurrentController, Model.CreateSizeParameters(size));

    //                    if (size == pageSize)
    //                    {
    //                        <li class="active"><a href="@action">@size</a></li>
    //                    }
    //                    else
    //                    {
    //                        <li><a href="@action">@size</a></li>
    //                    }
    //                }
    //            </ul>
    //        </div>

    //        @if (Model.HasFilters)
    //        {
    //            foreach (var dropdownItems in Model.Filters)
    //            {
    //                string cssEx = "default";
    //                string filterKey = dropdownItems.Select(e => e.Params["key"]).Select(e => e.ToString()).Distinct().FirstOrDefault();
    //                string filterTitle = translate($"No {filterKey} filter selected");

    //                <div class="pagination dropdown pull-right" style="margin-left: 20px; min-width: 175px;" data-toggle="tooltip" title="@translate("FilterItems")">
    //                    <ul class="dropdown-menu">
    //                        @foreach (var item in dropdownItems)
    //                        {
    //                            string action = Url.Action(item.Action, Model.CurrentController, item.Params);

    //                            if (item.Active)
    //                            {
    //                                cssEx = "info";
    //                                filterTitle = viewBagWrapper.Translate(item.Display);
    //                                <li class="active"><a href="@action">@filterTitle</a></li>
    //                            }
    //                            else
    //                            {
    //                                <li><a href="@action">@viewBagWrapper.Translate(item.Display)</a></li>
    //                            }
    //                        }
    //                    </ul>
    //                    <button class="btn btn-@cssEx dropdown-toggle" type="button" name="pageIndex" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
    //                        @filterTitle
    //                        <span class="caret"></span>
    //                    </button>
    //                </div>
    //            }
    //        }
    //    </nav>
    //</div>
}
