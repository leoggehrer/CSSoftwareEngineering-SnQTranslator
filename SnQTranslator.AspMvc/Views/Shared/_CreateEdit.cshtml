@*@CodeCopy*@
@{
    @using CommonBase.Extensions
    @using SnQTranslator.AspMvc.Models.Modules.Common
    @using SnQTranslator.AspMvc.Modules.Handler
    @using SnQTranslator.AspMvc.Modules.Language
    @using SnQTranslator.AspMvc.Modules.Session
    @using SnQTranslator.AspMvc.Modules.View
    @using SnQTranslator.AspMvc.Models.Modules.View
    @model EditViewModel

    var viewBagInfo = Model?.ViewBagInfo;
    var sessionInfo = new SessionWrapper(Context.Session);

    @if (Model.DisplayType.IsGenericTypeOf(typeof(OneToAnotherModel<,,,>)))
    {
        var oneProperty = Model.DisplayType.GetProperty("OneModel");
        var oneModel = oneProperty?.GetValue(Model.DisplayModel) as IdentityModel;
        var anotherProperty = Model.DisplayType.GetProperty("AnotherModel");
        var anotherModel = anotherProperty?.GetValue(Model.DisplayModel) as IdentityModel;

        viewBagInfo.ModelCategory = ModelCategory.OneToAnother;
        if (oneModel != null)
        {
            viewBagInfo.ItemPrefix = "OneModel";
            oneModel.ViewBagInfo = viewBagInfo;
            @await Html.PartialAsync("_EditModel", oneModel)
        }
        if (anotherModel != null)
        {
            viewBagInfo.ItemPrefix = "AnotherModel";
            anotherModel.ViewBagInfo = viewBagInfo;
            @await Html.PartialAsync("_EditModel", anotherModel)
        }
        <hr />
    }
    else if (Model.DisplayType.IsGenericTypeOf(typeof(OneToManyModel<,,,>)))
    {
        var oneProperty = Model.DisplayType.GetProperty("OneModel");
        var oneModel = oneProperty?.GetValue(Model.DisplayModel) as IdentityModel;
        var manyProperty = Model.DisplayType.GetProperty("ManyModels");
        var manyModels = manyProperty?.GetValue(Model.DisplayModel) as IdentityModel;

        viewBagInfo.ModelCategory = ModelCategory.MasterDetail;
        viewBagInfo.ParentModel = oneModel;
        viewBagInfo.ItemPrefix = "OneModel";
        oneModel.ViewBagInfo = viewBagInfo;
        @await Html.PartialAsync("_EditModel", oneModel)
        <hr />
    }
    else if (Model.DisplayType.IsGenericTypeOf(typeof(CompositeModel<,,,,,>)))
    {
        var connectorProperty = Model.DisplayType.GetProperty("ConnectorModel");
        var connectorModel = connectorProperty?.GetValue(Model.DisplayModel) as IdentityModel;
        var oneProperty = Model.DisplayType.GetProperty("OneModel");
        var oneModel = oneProperty?.GetValue(Model.DisplayModel) as IdentityModel;
        var anotherProperty = Model.DisplayType.GetProperty("AnotherModel");
        var anotherModel = anotherProperty?.GetValue(Model.DisplayModel) as IdentityModel;

        viewBagInfo.ModelCategory = ModelCategory.Composite;
        if (connectorModel != null)
        {
            viewBagInfo.ItemPrefix = "ConnectorModel";
            <h2>@viewBagInfo.TranslateFor("ConnectorModel")</h2>
            connectorModel.ViewBagInfo = viewBagInfo;
            @await Html.PartialAsync("_EditModel", connectorModel)
        }
        if (oneModel != null)
        {
            viewBagInfo.ItemPrefix = "OneModel";
            oneModel.ViewBagInfo = viewBagInfo;
            <h2>@viewBagInfo.TranslateFor("OneModel")</h2>
            @await Html.PartialAsync("_EditModel", oneModel)
        }
        if (anotherModel != null)
        {
            viewBagInfo.ItemPrefix = "AnotherModel";
            anotherModel.ViewBagInfo = viewBagInfo;
            <h2>@viewBagInfo.TranslateFor("AnotherModel")</h2>
            @await Html.PartialAsync("_EditModel", anotherModel)
        }
        <hr />
    }
    else
    {
        viewBagInfo.ModelCategory = ModelCategory.Single;
        Model.DisplayModel.ViewBagInfo = viewBagInfo;
        @await Html.PartialAsync("_EditModel", Model.DisplayModel)
        <hr />
    }
}
