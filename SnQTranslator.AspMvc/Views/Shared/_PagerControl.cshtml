@*@CodeCopy*@
@{
    @using SnQTranslator.AspMvc.Models.Modules.Common;
    @using SnQTranslator.AspMvc.Models.Modules.View
    @using SnQTranslator.AspMvc.Modules.Handler
    @using SnQTranslator.AspMvc.Modules.Language
    @using SnQTranslator.AspMvc.Modules.Session
    @using SnQTranslator.AspMvc.Modules.View
    @model IndexViewModel

    var viewBagInfo = Model?.ViewBagInfo;
    var sessionInfo = new SessionWrapper(Context.Session);
    var pageIndexAction = "IndexByPageIndex";
    var pageSizeAction = "IndexByPageSize";
    var pageCount = sessionInfo.GetPageCount(viewBagInfo.Controller);
    var pageIndex = sessionInfo.GetPageIndex(viewBagInfo.Controller);
    var pageSize = sessionInfo.GetPageSize(viewBagInfo.Controller);
    var prvCss = pageIndex == 0 ? "page-item disabled" : "page-item";
    var nxtCss = (pageIndex + 1) * pageSize >= pageCount ? "page-item disabled" : "page-item";
    var maxPageIndex = pageCount / pageSize;
    var filterValues = sessionInfo.GetFilterValues(viewBagInfo.Controller);
    var filterText = filterValues?.Count > 0 ? "*" : string.Empty;

    if (pageCount % pageSize == 0)
    {
        maxPageIndex = maxPageIndex - 1;
    }
    int MinItemIndex(int index)
    {
        return Math.Min((index * pageSize) + 1, pageCount);
    }
    int MaxItemIndex(int index)
    {
        return Math.Min(((index + 1) * pageSize), pageCount);
    }
    object CreateIndexParameters(int pageIndex)
    {
        return new { pageIndex, pageSize };
    }
    @if (pageCount > pageSize)
    {
        <nav class="navbar">
            <div class="btn-group" role="group" aria-label="Button group filter and page index">
                @if (viewBagInfo.HasFilter)
                {
                    <button class="btn btn-outline-primary" data-toggle="collapse" href="#collapseFilter" role="button" aria-expanded="false" aria-controls="collapseFilter">
                        <i class="fa fa-filter">@filterText</i>
                    </button>
                }
                <div class="dropdown">
                    <button class="btn btn-outline-primary dropdown-toggle" style="min-width: 175px;" type="button" id="dropdownPageIndex" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="@viewBagInfo.Translate("PageIndex")">
                        @($"{MinItemIndex(pageIndex)}..{MaxItemIndex(pageIndex)} / {pageCount}")
                        <span class="caret"></span>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownPageIndex">
                        @for (int index = 0; index <= maxPageIndex; index++)
                        {
                            string action = Url.Action(pageIndexAction, viewBagInfo.Controller, CreateIndexParameters(index));

                            if (index == pageIndex)
                            {
                                <a class="dropdown-item active" href="@action">@($"{MinItemIndex(index)}..{MaxItemIndex(index)}")</a>
                            }
                            else
                            {
                                <a class="dropdown-item" href="@action">@($"{MinItemIndex(index)}..{MaxItemIndex(index)}")</a>
                            }
                        }
                    </div>
                </div>
            </div>

            <ul class="pagination justify-content-center" style="margin-top: 15px">
                <li class="@prvCss">
                    @if (pageIndex > 0)
                    {
                        <a class="page-link" href="@Url.Action(pageIndexAction, viewBagInfo.Controller, CreateIndexParameters(pageIndex - 1))" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    }
                    else
                    {
                        <a class="page-link">&laquo;</a>
                    }
                </li>
                @{
                    int deltaPage = 5;
                    int pageLowerIdx = 0;
                    int pageUpperIdx = deltaPage;
                    int pageLowerRange = (pageLowerIdx * pageSize);

                    while (pageLowerRange <= pageCount)
                    {
                        if (pageIndex >= pageLowerIdx && pageIndex < pageUpperIdx)
                        {
                            int startIdx = pageLowerIdx;

                            while (startIdx > 0 && startIdx + deltaPage - 1 > maxPageIndex)
                            {
                                startIdx--;
                            }
                            for (int idx = startIdx; idx < pageUpperIdx && (idx * pageSize) < pageCount; idx++)
                            {
                                string text = $"{MinItemIndex(idx)}..{MaxItemIndex(idx)}";
                                string action = Url.Action(pageIndexAction, viewBagInfo.Controller, CreateIndexParameters(idx));

                                if (idx == pageIndex)
                                {
                                    <li class="page-item active" style="min-width: 40px;"><a class="page-link" data-toggle="tooltip" title="@text" href="@action">@(idx + 1)</a></li>
                                }
                                else
                                {
                                    <li class="page-item" style="min-width: 40px;"><a class="page-link" data-toggle="tooltip" title="@text" href="@action">@(idx + 1)</a></li>
                                }
                            }
                        }
                        pageLowerIdx = pageUpperIdx;
                        pageUpperIdx = pageUpperIdx + deltaPage;
                        pageLowerRange = (pageLowerIdx * pageSize);
                    }
                }
                <li class="@nxtCss">
                    @if (pageIndex < maxPageIndex)
                    {
                        <a class="page-link" href="@Url.Action(pageIndexAction, viewBagInfo.Controller, CreateIndexParameters(pageIndex + 1))" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    }
                    else
                    {
                        <a class="page-link" aria-hidden="true">&raquo;</a>
                    }
                </li>
            </ul>

            <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
                <div class="dropdown">
                    <button class="btn btn-outline-primary dropdown-toggle" type="button" id="dropdownPageSize" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" title="@viewBagInfo.Translate("PageSize")">
                        @pageSize
                        <span class="caret"></span>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownPageSize">
                        @foreach (int size in sessionInfo.GetPageSizes(viewBagInfo.Controller))
                        {
                            string action = Url.Action(pageSizeAction, viewBagInfo.Controller, new { pageSize = size });

                            if (size == pageSize)
                            {
                                <a class="dropdown-item active" href="@action">@size</a>
                            }
                            else
                            {
                                <a class="dropdown-item" href="@action">@size</a>
                            }
                        }
                    </div>
                </div>
            </div>

            <div class="collapse w-100" style="margin-top: 0.5em;" id="collapseFilter">
                <div class="card card-body">
                    @await Html.PartialAsync("_FilterControl", Model)
                </div>
            </div>
        </nav>
    }
    else if (pageCount == 0 && viewBagInfo.HasFilter && string.IsNullOrEmpty(filterText) == false)
    {
        <nav class="navbar">
            <div class="btn-group" role="group" aria-label="Button group filter">
                <button class="btn btn-outline-primary" data-toggle="collapse" href="#collapseFilter" role="button" aria-expanded="false" aria-controls="collapseFilter">
                    <i class="fa fa-filter">@filterText</i>
                </button>
            </div>

            <div class="collapse.show w-100" style="margin-top: 0.5em;" id="collapseFilter">
                <div class="card card-body">
                    @await Html.PartialAsync("_FilterControl", Model)
                </div>
            </div>
        </nav>
    }
    else if (viewBagInfo.HasFilter)
    {
        <nav class="navbar">
            <div class="btn-group" role="group" aria-label="Button group filter">
                <button class="btn btn-outline-primary" data-toggle="collapse" href="#collapseFilter" role="button" aria-expanded="false" aria-controls="collapseFilter">
                    <i class="fa fa-filter">@filterText</i>
                </button>
            </div>

            <div class="collapse w-100" style="margin-top: 0.5em;" id="collapseFilter">
                <div class="card card-body">
                    @await Html.PartialAsync("_FilterControl", Model)
                </div>
            </div>
        </nav>
    }
}
