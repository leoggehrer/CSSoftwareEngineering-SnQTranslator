@*@CodeCopy*@
@{
    @using SnQTranslator.AspMvc.Modules.Language
    @using SnQTranslator.AspMvc.Modules.Session
    @using SnQTranslator.AspMvc.Modules.View
    @model SnQTranslator.AspMvc.Models.IdentityModel

    var viewBagWrapper = new ViewBagWrapper(ViewBag);
    var sessionWrapper = new SessionWrapper(Context.Session);
    var controller = ViewContext.RouteData.Values["controller"].ToString();
    var action = ViewContext.RouteData.Values["action"].ToString();
    Func<string, string> translate = Translator.TranslateIt;
    Func<string, string> translateFor = pn => translate($"{controller}.{pn}");
    var editViewModel = viewBagWrapper.CreateEditViewModel(controller, Model);

    Model.ViewBagInfo = viewBagWrapper;

    <div class="row">
        <div class="col-md-6">
            @foreach (var item in editViewModel.DisplayProperties)
            {
                if (item.CanRead && item.CanWrite)
                {
                    Model.ViewBagInfo.Handled = false;
                    Model.ViewBagInfo.DisplayProperty = item;
                    <div class="form-group">
                        <label class="control-label" for="@item.Name">@translateFor(editViewModel.GetLabel(item))</label>
                        @await Html.PartialAsync("_EditControl", Model)
                        @if (Model.ViewBagInfo.Handled == false)
                        {
                            if (item.PropertyType.IsEnum)
                            {
                                @Html.DropDownList(item.Name, Html.GetEnumSelectList(item.PropertyType), null, new { @class = "form-control" })
                            }
                            else
                            {
                                <input class="form-control" type="text" id="@item.Name" name="@item.Name" value="@editViewModel.GetValue(item)" />
                                <span class="text-danger field-validation-valid" data-valmsg-for="@item.Name" data-valmsg-replace="true"></span>
                            }
                        }
                    </div>
                }
                else if (item.CanRead)
                {
                    Model.ViewBagInfo.Handled = false;
                    Model.ViewBagInfo.DisplayProperty = item;
                    <div class="form-group">
                        <label class="control-label" for="@item.Name">@translateFor(editViewModel.GetLabel(item))</label>
                        @await Html.PartialAsync("_EditControl", Model)
                        @if (Model.ViewBagInfo.Handled == false)
                        {
                            <input class="form-control" type="text" id="@item.Name" name="@item.Name" value="@editViewModel.GetValue(item)" readonly="readonly" />
                        }
                    </div>
                }
            }
        </div>
    </div>
}
